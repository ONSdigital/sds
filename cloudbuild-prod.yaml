steps:
  # Docker Auth
  - name: 'gcr.io/cloud-builders/gcloud'
    id: "google cloud docker auth"
    entrypoint: sh
    args:
    - "-c"
    - |
      gcloud auth configure-docker europe-west2-docker.pkg.dev

  # Docker Build
  - name: 'gcr.io/cloud-builders/docker'
    args: [ 'build', '-t', 'europe-west2-docker.pkg.dev/ons-sds-dns/sds/${PROJECT_ID}:latest', '-t', 'europe-west2-docker.pkg.dev/ons-sds-dns/sds/${PROJECT_ID}:${TAG_NAME}',  '.' ]

  # Docker push latest tag to Google Artifact Registry of ons-sds-dns project
  - name: 'gcr.io/cloud-builders/docker'
    args: [ 'push',  'europe-west2-docker.pkg.dev/ons-sds-dns/sds/${PROJECT_ID}:latest' ]

  # Docker push version tag to Google Artifact Registry of ons-sds-dns project
  - name: 'gcr.io/cloud-builders/docker'
    args: [ 'push',  'europe-west2-docker.pkg.dev/ons-sds-dns/sds/${PROJECT_ID}:${TAG_NAME}' ]

  # Runs the Docker image from ons-sds-dns GAR
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: "Run image"
    entrypoint: gcloud
    args: [ 'run', 'deploy', 'sds', '--image', 'europe-west2-docker.pkg.dev/ons-sds-dns/sds/${PROJECT_ID}:latest',
            '--region', 'europe-west2', '--allow-unauthenticated', '--ingress', 'internal-and-cloud-load-balancing' ]

  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Show image vulnerabilities'
    entrypoint: sh
    args:
      - '-c'
      - |
        gcloud alpha artifacts docker images describe europe-west2-docker.pkg.dev/${PROJECT_ID}/sds/sds:latest \
        --show-package-vulnerability --format=json | tee /dev/fd/2 > vulnerability_report.txt

  - name: 'alpine'
    id: 'Check for critical vulnerabilities'
    entrypoint: sh
    args:
      - '-c'
      - |
        apk add jq
        if jq -e '.package_vulnerability_summary.vulnerabilities.CRITICAL[] | select(.kind == "VULNERABILITY" and .vulnerability.severity == "CRITICAL")' vulnerability_report.txt > /dev/null; then
          echo "Error: Critical vulnerability found with image" >&2
          exit 1
        fi

  # Deploy cloud function
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: "Deploy cloud function"
    entrypoint: sh
    args:
      - '-c'
      - |
        cd src/app/
        gcloud functions deploy new-dataset-function \
        --allow-unauthenticated \
        --gen2 \
        --ingress-settings=internal-and-gclb \
        --runtime=python311 \
        --region=europe-west2 \
        --source=. \
        --entry-point=new_dataset \
        --trigger-event-filters="type=google.cloud.storage.object.v1.finalized" \
        --trigger-event-filters="bucket=${_DATASET_BUCKET_NAME}" \
        --set-env-vars="DATASET_BUCKET_NAME=${_DATASET_BUCKET_NAME},SCHEMA_BUCKET_NAME=${_SCHEMA_BUCKET_NAME},CONF=cloud-build,AUTODELETE_DATASET_BUCKET_FILE=${_AUTODELETE_DATASET_BUCKET_FILE},RETAIN_DATASET_FIRESTORE=${_RETAIN_DATASET_FIRESTORE},LOG_LEVEL=${_LOG_LEVEL},PROJECT_ID=${PROJECT_ID},PUBLISH_SCHEMA_TOPIC_ID=${_PUBLISH_SCHEMA_TOPIC_ID},PUBLISH_DATASET_TOPIC_ID=${_PUBLISH_DATASET_TOPIC_ID}"

options:
  logging: CLOUD_LOGGING_ONLY

# Store images in Google Artifact Registry
images:
  - europe-west2-docker.pkg.dev/ons-sds-dns/sds/${PROJECT_ID}:${TAG_NAME}
  - europe-west2-docker.pkg.dev/ons-sds-dns/sds/${PROJECT_ID}:latest
